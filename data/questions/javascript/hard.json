{
  "questions": [
    {
      "id": "js-hard-1",
      "question": "What happens when a derived class constructor calls super() in JavaScript?",
      "options": [
        "It calls the parent class constructor",
        "It creates a new instance of the parent class",
        "It initializes the parent class properties",
        "All of the above"
      ],
      "correctAnswers": ["All of the above"],
      "type": "multiple",
      "explanation": "When a derived class constructor calls super(), it calls the parent class constructor, which initializes the parent class properties. This must be done before accessing 'this' in the derived class."
    },
    {
      "id": "js-hard-2",
      "question": "Which of the following are true about JavaScript's Event Loop?",
      "options": [
        "It's single-threaded",
        "It uses a message queue",
        "It processes one message at a time",
        "It can handle multiple tasks simultaneously"
      ],
      "correctAnswers": [
        "It's single-threaded",
        "It uses a message queue",
        "It processes one message at a time"
      ],
      "type": "multiple",
      "explanation": "JavaScript's Event Loop is single-threaded and processes one message at a time from the message queue. While it can handle asynchronous operations, it does so by queuing them and processing them one at a time."
    },
    {
      "id": "js-hard-3",
      "question": "What is the difference between Object.freeze() and Object.seal()?",
      "options": [
        "Object.freeze() makes an object immutable",
        "Object.seal() prevents adding new properties",
        "Object.freeze() is deeper than Object.seal()",
        "Object.seal() allows modifying existing properties"
      ],
      "correctAnswers": [
        "Object.freeze() makes an object immutable",
        "Object.seal() prevents adding new properties",
        "Object.seal() allows modifying existing properties"
      ],
      "type": "multiple",
      "explanation": "Object.freeze() makes an object completely immutable, while Object.seal() only prevents adding or removing properties but allows modifying existing ones. Neither method is recursive (deep)."
    },
    {
      "id": "js-hard-4",
      "question": "What is the purpose of async generator functions in JavaScript?",
      "options": [
        "They allow yielding Promises",
        "They can be used with for await...of loops",
        "They provide a way to handle asynchronous sequences",
        "All of the above"
      ],
      "correctAnswers": ["All of the above"],
      "type": "multiple",
      "explanation": "Async generator functions allow you to yield Promises and handle asynchronous sequences. They can be used with for await...of loops to process the yielded values as they become available."
    }
  ]
}
