{
  "questions": [
    {
      "id": "py-medium-1",
      "question": "What is the purpose of the nonlocal keyword in Python?",
      "options": [
        "It allows modifying variables from the outer scope",
        "It creates a new variable in the current scope",
        "It makes a variable accessible globally",
        "It prevents variable modification"
      ],
      "correctAnswers": ["It allows modifying variables from the outer scope"],
      "type": "single",
      "explanation": "The nonlocal keyword allows the inner function to modify the variable from the outer scope. This is useful when you need to change a variable that's not in the global scope."
    },
    {
      "id": "py-medium-2",
      "question": "Which of the following are valid ways to create a dictionary in Python?",
      "options": [
        "Using empty curly braces",
        "Using the dict() constructor",
        "Using key-value pairs in curly braces",
        "All of the above"
      ],
      "correctAnswers": ["All of the above"],
      "type": "multiple",
      "explanation": "All of these are valid ways to create a dictionary in Python. Empty dictionaries can be created using {} or dict(), and dictionaries with key-value pairs can be created using {'key': 'value'} syntax."
    },
    {
      "id": "py-medium-3",
      "question": "What is the difference between a list comprehension and a generator expression?",
      "options": [
        "List comprehensions are faster",
        "Generator expressions use less memory",
        "List comprehensions create a list immediately",
        "Generator expressions are lazy evaluated"
      ],
      "correctAnswers": [
        "Generator expressions use less memory",
        "List comprehensions create a list immediately",
        "Generator expressions are lazy evaluated"
      ],
      "type": "multiple",
      "explanation": "List comprehensions create the entire list in memory at once, while generator expressions create items one at a time as needed. This makes generator expressions more memory efficient but list comprehensions can be faster for small datasets."
    },
    {
      "id": "py-medium-4",
      "question": "What will be the output of the following code?",
      "code": {
        "code": "from collections import defaultdict\nd = defaultdict(list)\nd['key'].append(1)\nprint(d['nonexistent'])",
        "language": "python"
      },
      "options": ["[]", "None", "KeyError", "[1]"],
      "correctAnswers": ["[]"],
      "type": "single",
      "explanation": "defaultdict automatically creates a new list when a non-existent key is accessed. This is different from a regular dictionary which would raise a KeyError."
    }
  ]
}
