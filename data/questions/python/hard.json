{
  "questions": [
    {
      "id": "py-hard-1",
      "question": "What is the purpose of metaclasses in Python?",
      "options": [
        "They allow modifying class creation",
        "They can add class-level attributes",
        "They can control how classes are instantiated",
        "All of the above"
      ],
      "correctAnswers": ["All of the above"],
      "type": "multiple",
      "explanation": "Metaclasses in Python allow you to customize class creation. They can add class-level attributes, modify class behavior, and control how classes are instantiated."
    },
    {
      "id": "py-hard-2",
      "question": "Which of the following are true about Python's GIL (Global Interpreter Lock)?",
      "options": [
        "It prevents multiple threads from executing Python bytecode simultaneously",
        "It only affects CPU-bound tasks",
        "It can be completely disabled",
        "It doesn't affect multiprocessing"
      ],
      "correctAnswers": [
        "It prevents multiple threads from executing Python bytecode simultaneously",
        "It only affects CPU-bound tasks",
        "It doesn't affect multiprocessing"
      ],
      "type": "multiple",
      "explanation": "The GIL is a mutex that protects access to Python objects, preventing multiple native threads from executing Python bytecodes simultaneously. It primarily affects CPU-bound tasks and doesn't impact multiprocessing as each process has its own GIL."
    },
    {
      "id": "py-hard-3",
      "question": "What is the difference between __new__ and __init__ in Python?",
      "options": [
        "__new__ is called before __init__",
        "__new__ returns the instance",
        "__init__ initializes the instance",
        "All of the above"
      ],
      "correctAnswers": ["All of the above"],
      "type": "multiple",
      "explanation": "__new__ is called first to create the instance and returns it, while __init__ is called after to initialize the instance. __new__ is a static method that takes the class as its first argument, while __init__ is an instance method that takes the instance as its first argument."
    },
    {
      "id": "py-hard-4",
      "question": "What is the purpose of asyncio in Python?",
      "options": [
        "It provides a framework for writing concurrent code",
        "It allows writing asynchronous code using async/await syntax",
        "It helps manage asynchronous I/O operations",
        "All of the above"
      ],
      "correctAnswers": ["All of the above"],
      "type": "multiple",
      "explanation": "asyncio is a library for writing concurrent code using async/await syntax. It provides a framework for writing asynchronous code and helps manage asynchronous I/O operations."
    }
  ]
}
